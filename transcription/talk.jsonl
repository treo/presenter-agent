{"message_text": "Okay, hello everyone.", "slide_info": {"current_slide": "/00-cover", "total_slides": 34, "position": 0}, "elapsed_time": "0m 11s", "timestamp": "2025-06-25T13:59:39.018451"}
{"message_text": "Today, I'm going to talk about our sci-fi dreams and how we turned them into reality. It will be about our journey that is mine and my colleagues to build an AI agent framework that maybe sucks a little bit less than those more popular ones that you may have heard of. But first of all, let me introduce myself.", "slide_info": {"current_slide": "/01-paul-dubs", "total_slides": 34, "position": 1}, "elapsed_time": "1m 17s", "timestamp": "2025-06-25T14:00:45.252361"}
{"message_text": "My name is Poldiubs, and I'm the CTO of ExpressAI, where I am mostly wrestling with AI agents and the infrastructure to make them work. And if I'm not wrestling with AI agents or with artificial intelligence, you may find me wrestling with artificial stones in a bouldering gym. And there you might hear me say something like, hey, step back, everyone. I'm going to try something stupid.", "slide_info": {"current_slide": "/01-paul-dubs", "total_slides": 34, "position": 1}, "elapsed_time": "1m 36s", "timestamp": "2025-06-25T14:01:04.495701"}
{"message_text": "And something stupid, yes, also what I am going to try today as well. You see, we all know that doing live demos, especially ones that are reliant on a good Internet connection,", "slide_info": {"current_slide": "/01-paul-dubs", "total_slides": 34, "position": 1}, "elapsed_time": "1m 44s", "timestamp": "2025-06-25T14:01:12.761044"}
{"message_text": "A very finicky and risky proposition at conferences.", "slide_info": {"current_slide": "/01-paul-dubs", "total_slides": 34, "position": 1}, "elapsed_time": "2m 19s", "timestamp": "2025-06-25T14:01:47.115977"}
{"message_text": "But what I'm going to do today is, I'm going to have an AI agent running by my side. One that will listen to this talk just like you do, but it will assist me in giving the talk. It will know when I'm about done talking about a slide, and then it will move on to the next. And it will be able to give me little hints if I forget to talk about something.", "slide_info": {"current_slide": "/01-paul-dubs", "total_slides": 34, "position": 1}, "elapsed_time": "2m 21s", "timestamp": "2025-06-25T14:01:49.248097"}
{"message_text": "So.", "slide_info": {"current_slide": "/01-paul-dubs", "total_slides": 34, "position": 1}, "elapsed_time": "2m 26s", "timestamp": "2025-06-25T14:01:54.526367"}
{"message_text": "Computer, please introduce yourself to the audience now.", "slide_info": {"current_slide": "/01-paul-dubs", "total_slides": 34, "position": 1}, "elapsed_time": "2m 27s", "timestamp": "2025-06-25T14:01:55.147681"}
{"message_text": "Well", "slide_info": {"current_slide": "/01-paul-dubs", "total_slides": 34, "position": 1}, "elapsed_time": "2m 58s", "timestamp": "2025-06-25T14:02:26.347134"}
{"message_text": "So, if anything goes haywire, if my slides suddenly start going back and forth without me doing anything, or if you see messages pop up, like, yeah, let's do a quick example. Computer, do a small hint message so the audience can see what it looks like if you are trying to give me a hint.", "slide_info": {"current_slide": "/01-paul-dubs", "total_slides": 34, "position": 1}, "elapsed_time": "4m 11s", "timestamp": "2025-06-25T14:03:39.323768"}
{"message_text": "Yeah, this is what it looks like. And if things come to be weird, it's all my own fault because Monday night I thought, well, how would I introduce myself? Oh, I know. I'm going to do something stupid and then do something stupid. So just over the last couple of days while I was working on my slides, I have had this fixed idea of having an agent run by my side and assist me in giving this talk. And yeah, this agent is built using the framework that I'm going to be talking about today. And after the talk, you can just go to GitHub and download it and play with it. It's also where you get Get, sir.", "slide_info": {"current_slide": "/01-paul-dubs", "total_slides": 34, "position": 1}, "elapsed_time": "4m 20s", "timestamp": "2025-06-25T14:03:48.393784"}
{"message_text": "Now moving on from who I am", "slide_info": {"current_slide": "/01-paul-dubs", "total_slides": 34, "position": 1}, "elapsed_time": "4m 24s", "timestamp": "2025-06-25T14:03:52.403769"}
{"message_text": "Very much proof of concept", "slide_info": {"current_slide": "/02-sci-fi-inspiration", "total_slides": 34, "position": 2}, "elapsed_time": "4m 30s", "timestamp": "2025-06-25T14:03:58.544565"}
{"message_text": "Talkgiving Helper, that's here the actual meat of the talk.", "slide_info": {"current_slide": "/04-what-is-ai-agent", "total_slides": 34, "position": 3}, "elapsed_time": "5m 44s", "timestamp": "2025-06-25T14:05:12.393047"}
{"message_text": "So, we have been always inspired by sci-fi, like Jarvis from Iron Man, Star Trek's computer, or even the autonomous AIs in cyberpunk novels, even though those usually ended up being evil. The thing that always has fascinated me even ever since I was a child is never a ghost in the machine. They could do things, they could percept their environment, they were doing stuff in the background. Very much different from a chatbot where you're like, hey, how many hours are there in strawberry? And then you get the wrong answer. So, we always want to be able to do things. And AI agents are what doing things are. They are very different from just plain", "slide_info": {"current_slide": "/04-what-is-ai-agent", "total_slides": 34, "position": 3}, "elapsed_time": "6m 21s", "timestamp": "2025-06-25T14:05:49.791224"}
{"message_text": "How many of you have had more exposure to trying to create an agent than what you see maybe on LinkedIn where people are like, oh my god, AI will take all of our jobs? And then there's the other people who are like, oh, I have automated away 600 people with this N8N script. Comment obvious engagement bait into the comments and I will show you how I did that. Obviously, there are extremes here. But yeah.", "slide_info": {"current_slide": "/04-what-is-ai-agent", "total_slides": 34, "position": 3}, "elapsed_time": "6m 50s", "timestamp": "2025-06-25T14:06:18.810110"}
{"message_text": "Let's see, how many of you have tried creating something with generative AI? So let's see, like a chatbot, something where you just use maybe the API. Okay, a couple of you already. That's good. And how many have kind of gone the additional step trying to identify this thing, give it the ability to be a bit more self-reliant, doing more than just text?", "slide_info": {"current_slide": "/04-what-is-ai-agent", "total_slides": 34, "position": 3}, "elapsed_time": "6m 55s", "timestamp": "2025-06-25T14:06:23.303399"}
{"message_text": "Okay, a few more.", "slide_info": {"current_slide": "/06-early-days", "total_slides": 34, "position": 5}, "elapsed_time": "10m 37s", "timestamp": "2025-06-25T14:10:05.395730"}
{"message_text": "Not that many, but a couple. So for everyone else, for those who haven't tried it yet, the core of it is an agent is a for loop. That's what you hear at least a lot of the dismissive people say. As you can see in this diagram, there's quite a bit more that can go on. It's a diagram that I flipped from last year's talk here. But I don't necessarily want to go too deep into the agent distinction. I just want to get to this common understanding that an AI agent is something that can perceive its environment and can act in it. And ideally towards a particular goal. But that's usually something that the user gives it. So now that we have an idea,", "slide_info": {"current_slide": "/07-frameworks-problem", "total_slides": 34, "position": 6}, "elapsed_time": "11m 20s", "timestamp": "2025-06-25T14:10:48.437653"}
{"message_text": "The complexity was growing quickly. They actually didn't even package the for loop. You still had to do the for loop yourself. They just packaged a bunch of prompts that you could use. I never really was happy with that. So anyway, going on, more frameworks were created to try to make RAD easier or to abstract the for loop and many such things. And yeah, I very often found that they became quite", "slide_info": {"current_slide": "/07-frameworks-problem", "total_slides": 34, "position": 6}, "elapsed_time": "11m 59s", "timestamp": "2025-06-25T14:11:27.826681"}
{"message_text": "hard to use. So you would have those nice looking tutorials where it's like, oh, you can have a thing with just 10 lines of code. Nine lines of code are just reading some demo data and everything is hidden in one thing. And it's like, oh, but how do I customize this for my actual use case? And it's like, oh, I don't care. I've written the blog post and now I'm getting all the traffic. I don't care about how you actually do something useful with it.", "slide_info": {"current_slide": "/08-xircuits-solution", "total_slides": 34, "position": 7}, "elapsed_time": "14m 48s", "timestamp": "2025-06-25T14:14:16.635642"}
{"message_text": "And you often find that there are things that are prompts hidden in layers of code. So if you want to change something, maybe for a different language or adapt it for a different LLM, things become kind of hard. And LLMs themselves were changing even more rapidly back then. It's like, oh, this version and this version and this knowledge cutoff date and this have different way of things and yet another company has produced another thing. All of this very often have put you into this hope-driven development thing. So you produce it, you have very little in terms of testability for it, very little insight into the black box, and you get into this almost religious hope-driven development. You have to pray that it works. And we found that with many people who eventually came", "slide_info": {"current_slide": "/09-babyagi", "total_slides": 34, "position": 8}, "elapsed_time": "14m 51s", "timestamp": "2025-06-25T14:14:18.995301"}
{"message_text": "However,", "slide_info": {"current_slide": "/09-babyagi", "total_slides": 34, "position": 8}, "elapsed_time": "15m 12s", "timestamp": "2025-06-25T14:14:40.424124"}
{"message_text": "It can be quite complex. So in this particular screenshot what we're looking at is one of our early implementations of baby AGI.", "slide_info": {"current_slide": "/09-babyagi", "total_slides": 34, "position": 8}, "elapsed_time": "15m 16s", "timestamp": "2025-06-25T14:14:44.334246"}
{"message_text": "It is something that", "slide_info": {"current_slide": "/09-babyagi", "total_slides": 34, "position": 8}, "elapsed_time": "15m 19s", "timestamp": "2025-06-25T14:14:47.112845"}
{"message_text": "Kiam.", "slide_info": {"current_slide": "/09-babyagi", "total_slides": 34, "position": 8}, "elapsed_time": "15m 19s", "timestamp": "2025-06-25T14:14:47.526851"}
{"message_text": "You give it a task and then it loops in on itself. You know about the world, it starts with text and ends with text.", "slide_info": {"current_slide": "/09-babyagi", "total_slides": 34, "position": 8}, "elapsed_time": "15m 48s", "timestamp": "2025-06-25T14:15:16.232701"}
{"message_text": "It is a nice little idea from the very early days.", "slide_info": {"current_slide": "/10-xai-agents", "total_slides": 34, "position": 9}, "elapsed_time": "16m 25s", "timestamp": "2025-06-25T14:15:53.559070"}
{"message_text": "And by adding a tool runner to it, we have made it able to interact with the world and perceive it. But as you can see, it became a bit complex. So the next thing that we did is we tried to abstract things away. So the for loop is always kind of the same. So we created a component for that. We tended to more or less always need an open AI based API. So we created a couple of components for that.", "slide_info": {"current_slide": "/11-xircuits-limitations", "total_slides": 34, "position": 10}, "elapsed_time": "16m 58s", "timestamp": "2025-06-25T14:16:26.207645"}
{"message_text": "And the main difference is just how we define the tools that we're using. And depending on the tools that are available to the agent, it can do many different things. In this particular presentation, for example, it has tools to go to the next slide or go to the previous slide or go to a particular slide to send me a hint to say something and so on. So defining tools that way is quite nice, but it has its limits.", "slide_info": {"current_slide": "/11-xircuits-limitations", "total_slides": 34, "position": 10}, "elapsed_time": "17m 17s", "timestamp": "2025-06-25T14:16:45.293341"}
{"message_text": "And those limits are that because we have abstracted away the for loop, it is harder to make changes on it, just like we saw with other frameworks.", "slide_info": {"current_slide": "/11-xircuits-limitations", "total_slides": 34, "position": 10}, "elapsed_time": "17m 34s", "timestamp": "2025-06-25T14:17:02.722500"}
{"message_text": "We can't easily change, like, how exactly something goes on. Trying out new ideas became harder because we have calcified the thing that is at the core.", "slide_info": {"current_slide": "/11-xircuits-limitations", "total_slides": 34, "position": 10}, "elapsed_time": "17m 35s", "timestamp": "2025-06-25T14:17:03.345481"}
{"message_text": "And we couldn't do this experimentation on the graphical level. It kind of always required us to go to the code level. And as you can see here on this screenshot from the site, too many tools just became visually overwhelming. You have this huge canvas with very many tools.", "slide_info": {"current_slide": "/11-xircuits-limitations", "total_slides": 34, "position": 10}, "elapsed_time": "18m 34s", "timestamp": "2025-06-25T14:18:02.766020"}
{"message_text": "So trying to find exactly the thing that you're looking for became harder to do. Just because it's graphical doesn't mean that it is necessarily great. And to be honest, some of our customers who use the tool have to get through their problems with other solutions. They're like, yeah, well, we did the first step of it, but we don't really like graphical programming. So they compiled it to Python. That's the thing that we do there.", "slide_info": {"current_slide": "/12-something-better", "total_slides": 34, "position": 11}, "elapsed_time": "19m 18s", "timestamp": "2025-06-25T14:18:46.507485"}
{"message_text": "then just made the compiled Python code pretty and worked from there. So what we learned is we needed something more flexible. And so since from the point where we decided, okay, let's not really use the mainstream for our core work to coming here, we thought, okay, maybe, you know, things have changed. There's cool AI now, there's LangGraph, Studio, whatever. Maybe things are actually better. So we tried to look at the other side of the fence, whether the grass is actually greener there.", "slide_info": {"current_slide": "/14-customer-feedback-2", "total_slides": 34, "position": 13}, "elapsed_time": "20m 54s", "timestamp": "2025-06-25T14:20:21.917325"}
{"message_text": "And we did that by kind of going through, have visited Reddit and kind of looked at the bigger common threats whenever people were kind of discussing things and when new things were announced and so on. Well, what we found is that the grass may seem greener on the other side, but it is just because it has more shit on it. And we smelt it quite a bit. So here are a couple of quotes that have stood out for us. And it was like one guy, he was like, 160 plus engineering hours last quarter were just for reverse engineering basic functionality that should have been documented. Another guy is like, oh yeah, the tutorials are great. They show toy examples with perfect data and they work great.", "slide_info": {"current_slide": "/15-can-we-do-better", "total_slides": 34, "position": 14}, "elapsed_time": "22m 32s", "timestamp": "2025-06-25T14:21:59.910495"}
{"message_text": "What we found there is things aren't really that much better with the more popular frameworks. So my colleagues and I, we've discussed, can we do any better? And we are kind of thinking, what are the things that annoy us the most when we are working with this? Well, one of them is kind of the black box problem. It's like, yeah, you create everything, but you can't really see what's actually going on inside. And LLMs are horrible for this because they tend to just hide problems from you. It's like, oh, yeah, it is calling a tool. The tool doesn't work. It'll try to use a different tool. Sometimes it will tell you, oh, the tool didn't work.", "slide_info": {"current_slide": "/16-xaibo-next-generation", "total_slides": 34, "position": 15}, "elapsed_time": "22m 41s", "timestamp": "2025-06-25T14:22:09.707034"}
{"message_text": "What we came up with is called Xibo. It is built on three core principles.", "slide_info": {"current_slide": "/16-xaibo-next-generation", "total_slides": 34, "position": 15}, "elapsed_time": "22m 48s", "timestamp": "2025-06-25T14:22:16.553850"}
{"message_text": "Dependency injection, radical transparency and Lego-like modularity.", "slide_info": {"current_slide": "/16-xaibo-next-generation", "total_slides": 34, "position": 15}, "elapsed_time": "23m 2s", "timestamp": "2025-06-25T14:22:30.752047"}
{"message_text": "So we wanted to have an agent framework that reveals, rather than conceals. Something that is not a black box, but rather a glass box, if you will.", "slide_info": {"current_slide": "/16-xaibo-next-generation", "total_slides": 34, "position": 15}, "elapsed_time": "23m 4s", "timestamp": "2025-06-25T14:22:32.423586"}
{"message_text": "So", "slide_info": {"current_slide": "/16-xaibo-next-generation", "total_slides": 34, "position": 15}, "elapsed_time": "23m 4s", "timestamp": "2025-06-25T14:22:32.781158"}
{"message_text": "Wired Dependency Injection", "slide_info": {"current_slide": "/17-dependency-injection", "total_slides": 34, "position": 16}, "elapsed_time": "23m 41s", "timestamp": "2025-06-25T14:23:09.659969"}
{"message_text": "And being able to swap components easily allows you to experiment more easily and honestly test things with a proper test environment. We'll get into all of this in a moment.", "slide_info": {"current_slide": "/17-dependency-injection", "total_slides": 34, "position": 16}, "elapsed_time": "24m 14s", "timestamp": "2025-06-25T14:23:42.696414"}
{"message_text": "So, dependency injection. A quick show of hands, who of you has ever heard of dependency injection, who has used it here? Because, I mean, if I would do this talk at a Java developer conference, probably every single hand would go up. But at MLConf we have more Python people and they may not have really ever used dependency injection like that.", "slide_info": {"current_slide": "/17-dependency-injection", "total_slides": 34, "position": 16}, "elapsed_time": "24m 18s", "timestamp": "2025-06-25T14:23:46.585580"}
{"message_text": "So, right.", "slide_info": {"current_slide": "/17-dependency-injection", "total_slides": 34, "position": 16}, "elapsed_time": "24m 19s", "timestamp": "2025-06-25T14:23:47.405948"}
{"message_text": "Let me explain that for all those who don't know what it is. The principle is super simple. Instead of instantiating your dependencies yourself, like in your constructor, you ask for it to be passed to you. And in the Java world, then you have like an version of control container that takes care of instantiating things and passing them around for you. But in Xibo, we handle all of that. And what dependency injection gives you is that it's really easy to change implementation. Like in our example just now, you saw that instead of creating a SQLite database object yourself, you were just asking for something that has a database type. And you don't necessarily care whether it is SQLite", "slide_info": {"current_slide": "/19-radical-transparency-proxy", "total_slides": 34, "position": 18}, "elapsed_time": "28m 21s", "timestamp": "2025-06-25T14:27:49.107167"}
{"message_text": "It is the simpler approach than what we've tried before. Because in between the circuits approach and what I'm showing you today, there was another, as they say, and that is the framework that I, the implementation that I've used at Berlin's MLCon, where I was showing an agent-based RAIK system. And in that system, we still tried to go for a super transparent setup where you could see everything that goes on, but we used an event-based thing and event listener-based thing where every module would be listening to events. And that sounds theoretically so pure and so full of possibilities, but", "slide_info": {"current_slide": "/19-radical-transparency-proxy", "total_slides": 34, "position": 18}, "elapsed_time": "28m 51s", "timestamp": "2025-06-25T14:28:18.984657"}
{"message_text": "Event listeners can be configured to listen in on what's going on in the interactions between module A and module B. And what you can do with it is you can, for example, create audit logs from it. What we do with our debug listeners is that we create something that has a", "slide_info": {"current_slide": "/19-radical-transparency-proxy", "total_slides": 34, "position": 18}, "elapsed_time": "28m 58s", "timestamp": "2025-06-25T14:28:26.411441"}
{"message_text": "We have something that gives it", "slide_info": {"current_slide": "/19-radical-transparency-proxy", "total_slides": 34, "position": 18}, "elapsed_time": "28m 59s", "timestamp": "2025-06-25T14:28:27.209100"}
{"message_text": "Haa", "slide_info": {"current_slide": "/19-radical-transparency-proxy", "total_slides": 34, "position": 18}, "elapsed_time": "29m 3s", "timestamp": "2025-06-25T14:28:31.073101"}
{"message_text": "So, what we do with it is that we listen on every interaction between every module and write it out. And that gives us the ability to create sequence diagrams with all the information like the parameters, the results, everything. And you will see this in a moment. So, yeah, here we have a screenshot on the next slide. You can see that every module, because every module is wrapped in this transparent proxy and when it calls something, our proxy will notify the listener. This captures the parameters, the timing, the exceptions. And this gives us complete and utter runtime visibility. Instead of peppering like logging statements everywhere or having prints or something, you literally get this x-ray vision.", "slide_info": {"current_slide": "/20-radical-transparency-explanation", "total_slides": 34, "position": 19}, "elapsed_time": "31m 9s", "timestamp": "2025-06-25T14:30:36.832470"}
{"message_text": "You don't have to make your", "slide_info": {"current_slide": "/21-modularity", "total_slides": 34, "position": 20}, "elapsed_time": "32m 22s", "timestamp": "2025-06-25T14:31:49.939113"}
{"message_text": "custom modules that you can create with this, any special, it's just yet another module. So we have this radical transparency. The modularity is just that it allows us to easily create new ideas. You can customize it to your needs. You can modify and replace the built-in components with your own. It's like you just connect the pieces. It's like this modular synthesizer where you connect things left and right to create a new sound or whatever. One thing that we did recently with it is we built a more complex memory system with it where it could have a short-term memory that only remembers the last eight things that it talked about. And that it would update those memories. And if the memory leaves the short...", "slide_info": {"current_slide": "/21-modularity", "total_slides": 34, "position": 20}, "elapsed_time": "32m 26s", "timestamp": "2025-06-25T14:31:54.283984"}
{"message_text": "short train the entire LLM.", "slide_info": {"current_slide": "/21-modularity", "total_slides": 34, "position": 20}, "elapsed_time": "32m 26s", "timestamp": "2025-06-25T14:31:54.787479"}
{"message_text": "So with this we have a full-on thing where we can do whatever we want.", "slide_info": {"current_slide": "/22-live-demo", "total_slides": 34, "position": 21}, "elapsed_time": "33m 47s", "timestamp": "2025-06-25T14:33:15.655937"}
{"message_text": "ability to look into what's going on safe or as on that. And well, what you can also do because it's kind of it doesn't need a server, but it can be used with a server. As I said, I have this stupid idea to have an AI assistant kind of help me with this talk. And it produced everything over time. I mean, I did all of this within the last 48 hours, just from oh hey, I have this idea to now it is kind of working during my talk right in front of all of you. So it allows us to do things quickly because you know gather the modules, adapt them a little without actually changing the ones that are there, and ship it.", "slide_info": {"current_slide": "/22-live-demo", "total_slides": 34, "position": 21}, "elapsed_time": "33m 52s", "timestamp": "2025-06-25T14:33:20.014793"}
{"message_text": "Ship it. Now we get to the other live demo.", "slide_info": {"current_slide": "/23-demo-screenshot-1", "total_slides": 34, "position": 22}, "elapsed_time": "33m 56s", "timestamp": "2025-06-25T14:33:24.553526"}
{"message_text": "So, let me bring up a terminal.", "slide_info": {"current_slide": "/23-demo-screenshot-1", "total_slides": 34, "position": 22}, "elapsed_time": "34m 0s", "timestamp": "2025-06-25T14:33:28.783274"}
{"message_text": "and run UVX", "slide_info": {"current_slide": "/23-demo-screenshot-1", "total_slides": 34, "position": 22}, "elapsed_time": "34m 1s", "timestamp": "2025-06-25T14:33:29.527208"}
{"message_text": "Zajebal init ML demo agent.", "slide_info": {"current_slide": "/23-demo-screenshot-1", "total_slides": 34, "position": 22}, "elapsed_time": "35m 22s", "timestamp": "2025-06-25T14:34:49.936489"}
{"message_text": "What this does, it's a kind of, well, what UVX is, for those of you who don't know, UV is a Python package manager, very much like NPM for JavaScript, but a lot better. And it comes with a functionality that is like NPM's NPX, which allows you to, without creating yet another virtual environment, it allows you to run tools right off the Python package index. And Zybo is out there, so I can create a new agent just by running it. And then it asks me what kinds of dependencies I want to install, because I don't necessarily want to download half the internet just to use a couple of APIs. So for my example here, I'm going to take OpenAI and the web server.", "slide_info": {"current_slide": "/23-demo-screenshot-1", "total_slides": 34, "position": 22}, "elapsed_time": "36m 14s", "timestamp": "2025-06-25T14:35:41.869681"}
{"message_text": "which I can pick and just modify. This example agent that it creates is just one that has a single Python tool which can get the current time. And if I now run UVRunZyboDev, it will run Zybo in server mode, in dev mode, and that automatically exposes our agent with an OpenAI API and it starts the debug UI. So let's take a quick look at the debug UI. It is not that great yet, but let's go in there. Like if you do this right now, you will be greeted with this empty-ish thing. But you can see there on the left we have our example thing.", "slide_info": {"current_slide": "/29-demo-screenshot-7", "total_slides": 34, "position": 28}, "elapsed_time": "36m 18s", "timestamp": "2025-06-25T14:35:46.230576"}
{"message_text": "Going from there, we have", "slide_info": {"current_slide": "/28-demo-screenshot-6", "total_slides": 34, "position": 27}, "elapsed_time": "36m 18s", "timestamp": "2025-06-25T14:35:46.785302"}
{"message_text": "Uh,", "slide_info": {"current_slide": "/28-demo-screenshot-6", "total_slides": 34, "position": 27}, "elapsed_time": "36m 34s", "timestamp": "2025-06-25T14:36:01.884593"}
{"message_text": "which is empty as of right now. So let's switch back to the terminal and run", "slide_info": {"current_slide": "/28-demo-screenshot-6", "total_slides": 34, "position": 27}, "elapsed_time": "36m 36s", "timestamp": "2025-06-25T14:36:03.978268"}
{"message_text": "Aua", "slide_info": {"current_slide": "/28-demo-screenshot-6", "total_slides": 34, "position": 27}, "elapsed_time": "36m 36s", "timestamp": "2025-06-25T14:36:04.464980"}
{"message_text": "And before Peter starts laughing, I forgot that because it's using the OpenAI API, you need to set the OpenAI key that it's supposed to use. I'm just going to copy my environment file from the agent that is running alongside this, and there it should have all the necessary keys.", "slide_info": {"current_slide": "/29-demo-screenshot-7", "total_slides": 34, "position": 28}, "elapsed_time": "37m 30s", "timestamp": "2025-06-25T14:36:58.705664"}
{"message_text": "And now I'm going to use a saved request to send a question like how late is it. Now I can switch back to the browser, click refresh, and here we can see how we have our sequence log of what happened in here.", "slide_info": {"current_slide": "/29-demo-screenshot-7", "total_slides": 34, "position": 28}, "elapsed_time": "38m 6s", "timestamp": "2025-06-25T14:37:33.939446"}
{"message_text": "If I click on a list of tools, I can see that it has a tool to know the current time. And we can see that it has executed that tool. And that is the current time. And then finally, it produced the response. And as you can see, we have everything, when that happened, what the arguments to this thing were, how long it took, the response with everything.", "slide_info": {"current_slide": "/27-demo-screenshot-5", "total_slides": 34, "position": 26}, "elapsed_time": "39m 49s", "timestamp": "2025-06-25T14:39:16.874242"}
{"message_text": "So how do you define an agent within this? If we switch to the config screen here, you can see a very much work in progress situation. But it does show you the different pieces that are defined here. We have an orchestrator, we have an LLM, we have a tool provider. And this is like a very declarative way that gives you an idea of how things are connected and what there is in this example. Very soon I want to make this UI fully usable so you can properly use it to configure and create new agents. But right now what you do is instead you can just open any old text editor and modify this YAML file. Or you can, well if you really want to,", "slide_info": {"current_slide": "/27-demo-screenshot-5", "total_slides": 34, "position": 26}, "elapsed_time": "40m 31s", "timestamp": "2025-06-25T14:39:59.592076"}
{"message_text": "So, let's go in there. VIM tools example. And yeah, as you can see, this is just a plain old Python file. We annotate the thing with tool mostly so that we can have tools and non-tools in the same file. But yeah, it's just a Python method that gets a parameter or gets a couple of parameters and gives a result. The documentation, the doc string here is actually quite important because we use that as information for the LLM when you use this.", "slide_info": {"current_slide": "/31-get-hands-dirty", "total_slides": 34, "position": 30}, "elapsed_time": "40m 47s", "timestamp": "2025-06-25T14:40:15.763519"}
{"message_text": "But if you want to use MCP servers, Zeibo these days also has support for it.", "slide_info": {"current_slide": "/30-demo-screenshot-8", "total_slides": 34, "position": 29}, "elapsed_time": "40m 48s", "timestamp": "2025-06-25T14:40:16.536140"}
{"message_text": "So, yeah, another thing that is super nice with it, and you can see that in the tests file, is that you can just test it like any old Python thing as well, because you can use the override config to inject a mock into it.", "slide_info": {"current_slide": "/32-try-xaibo-today", "total_slides": 34, "position": 31}, "elapsed_time": "41m 42s", "timestamp": "2025-06-25T14:41:10.478789"}
{"message_text": "So how can you get your hands dirty? How do you get to tending to your AI agents? Well, as you just saw in my demo, all you need to do is install UV if you don't have it yet. And then you can run uvx zibo init my agent, change the directory into it, run uv zibo dev.", "slide_info": {"current_slide": "/33-roadmap", "total_slides": 34, "position": 32}, "elapsed_time": "41m 54s", "timestamp": "2025-06-25T14:41:22.125255"}
{"message_text": "And that will start you up with something where you can just immediately start doing things.", "slide_info": {"current_slide": "/33-roadmap", "total_slides": 34, "position": 32}, "elapsed_time": "41m 54s", "timestamp": "2025-06-25T14:41:22.727669"}
{"message_text": "Overall, as I said, what is coming soon, we have released this to the public just about a month ago.", "slide_info": {"current_slide": "/33-roadmap", "total_slides": 34, "position": 32}, "elapsed_time": "43m 54s", "timestamp": "2025-06-25T14:43:22.239976"}
{"message_text": "And since then we have created a couple of, we have written a lot of documentation, we have created a couple of examples like this thing that is literally running alongside it, my presentation. But what we also want to do as soon as we possibly can is have a UI for a visual configuration, so you don't have to remember the structure of the YAML. We want to create a new tool provider that can be used to use the circuits tools that we have created for our other agents that we have in production right now. I want to add more API adapters. So as I said, you have the OpenAI chat completions API, you have the responses API, but we also want to make it trivial to use", "slide_info": {"current_slide": "/33-roadmap", "total_slides": 34, "position": 32}, "elapsed_time": "44m 10s", "timestamp": "2025-06-25T14:43:38.009423"}
{"message_text": "because there aren't that many users of this yet, your feedback can have an outsized impact on our priorities. So, if you are going to use Libo, your feedback will shape our priorities.", "slide_info": {"current_slide": "/34-questions", "total_slides": 34, "position": 33}, "elapsed_time": "44m 21s", "timestamp": "2025-06-25T14:43:48.974510"}
{"message_text": "Thank you very much for listening. If you want to", "slide_info": {"current_slide": "/34-questions", "total_slides": 34, "position": 33}, "elapsed_time": "44m 39s", "timestamp": "2025-06-25T14:44:07.664836"}
{"message_text": "Feel free to get it from GitHub, it's linked here on the slide, github.com/triol/mlconmunich2025", "slide_info": {"current_slide": "/34-questions", "total_slides": 34, "position": 33}, "elapsed_time": "44m 42s", "timestamp": "2025-06-25T14:44:10.023986"}
{"message_text": "And", "slide_info": {"current_slide": "/34-questions", "total_slides": 34, "position": 33}, "elapsed_time": "44m 57s", "timestamp": "2025-06-25T14:44:25.723570"}
{"message_text": "Yeah, if you want to reach out to me, you can send me an email to paul@xpress.ai or you can find me on LinkedIn or just talk to me in the hallway here. I'm still here for another two days.", "slide_info": {"current_slide": "/34-questions", "total_slides": 34, "position": 33}, "elapsed_time": "45m 4s", "timestamp": "2025-06-25T14:44:32.208323"}
{"message_text": "So yeah, thank you very much for listening, and questions please.", "slide_info": {"current_slide": "/34-questions", "total_slides": 34, "position": 33}, "elapsed_time": "45m 5s", "timestamp": "2025-06-25T14:44:33.151455"}
